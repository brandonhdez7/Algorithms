students = [
   'Rob',
   'Christopher',
   'Jim',
   'Jason',
   'Brian',
   'Brandon',
   'Zac',
   'JR',
   'Greg',
   'Ron',
   'Katie',
   'Sean',
   'Gbenga',
   'Khanh',
   'Connor',
   'Cody',
   'Michael',
   'Matt'
]

#import random

#def get_students():
    #rand_students_index = random.randint(0,len(students)-1)
    #current_student = student[rand_students_index]
    #students.remove(current_student)
    #return current_student


#while (len(students) > 0):
    #student1 = get_students()
    #student2 = get_students()
    #print "%s is paired with %s" % (student1, student2) 


#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

user_number = int(raw_input("Whats your number? "))


sum = 0
for i in range(0,user_number):
    if (i % 3 == 0 or i % 5 == 0):
        sum += i
        print sum


sum = int(raw_input("Enter number? "))
for i in range(0,1000,3):
    if (i % 2 == 0):
        sum += i
        print sum

#user_answer = int(raw_input("Enter number? "))
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#Lets print Fib!!!
fib1 = 1
fib2 = 1
sum_total = 0
for i in range(user_answer):
    print fib1
    if(fib1 % 2 == 0):
        sum_total += fib1
    # figure out what is the next number
    temp = fib1+fib2
    fib1 = fib2
    fib2 = temp
print sum_total



#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
prime_factor = []

user_number = int(raw_input("Whats your number? "))
for i in range(2,user_number):
    if (user_number % i == 0):
        prime_factor.append(i)
        user_number = user_number / i
        i = 2
print prime_factor


#know_prime = [2,3]

#def is_prime(n):
#    print n
#    total_known-primes = len(know_primes)
#    for i in range(0,total_known_primes):
#        if(n % known_primes[i] == 0):
#            return False
#        else:
#            continue
#known_primes.append(n)
#if (i == total_known_primes):
#    return True

is_prime(6)
is_prime(8)
is_prime(9)